---
- name: 'Gather OS specific variables'
  ansible.builtin.include_vars: "{{ vars_file }}"
  loop:
    - default.yml
    - "{{ ansible_facts['os_family'] | lower }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] | ansible.builtin.regex_search('[0-9]+\\.[0-9]+') }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] }}.yml"
  loop_control:
    loop_var: vars_file
  when: "(vars_file is ansible.builtin.abs and vars_file is ansible.builtin.file) or (vars_file is not ansible.builtin.abs and (role_path ~ '/vars/' ~ vars_file) is ansible.builtin.file)"
  tags:
    - always

- name: 'Install required packages'
  ansible.builtin.package:
    name: "{{ ldap_client_pkgs }}"
    state: present

- name: "Add {{ ldap_client_stunnel_user }} to extra groups"
  ansible.builtin.user:
    name: "{{ ldap_client_stunnel_user }}"
    groups: "{{ ldap_client_extra_groups }}"
    append: true
  notify: ldap_client_restart_stunnel
  when: "[ldap_client_extra_groups | default([])] | ansible.builtin.flatten | count"

- name: "Harden {{ ldap_client_stunnel_service_name }}.service"
  when: "ansible_facts['service_mgr'] == 'systemd'"
  block:
    - name: "Create override directory for {{ ldap_client_stunnel_service_name }}.service"
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ ldap_client_stunnel_service_name }}.service.d/"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: "Install override file for {{ ldap_client_stunnel_service_name }}.service"
      ansible.builtin.template:
        dest: "/etc/systemd/system/{{ ldap_client_stunnel_service_name }}.service.d/override.conf"
        src: stunnel_override.conf.j2
        owner: root
        group: root
        mode: '0644'
      register: _systemd_service_file
      notify: ldap_client_restart_stunnel

    - name: 'Reload service files'
      ansible.builtin.systemd_service:
        daemon_reload: true
      when: '_systemd_service_file is changed'

- name: 'Determine system certificate directory'
  ansible.builtin.command: 'openssl version -d'
  changed_when: false
  check_mode: false
  register: _openssldir
  when: "ldap_client_trusted_ca is not defined and ldap_client_ca_path is not defined"

- name: 'Store system certificate directory'
  ansible.builtin.set_fact:
    ldap_client_ca_path: "{{ _openssldir.stdout | ansible.builtin.regex_search('(?<=OPENSSLDIR: \").*(?=\")') }}/certs"
  when: "ldap_client_trusted_ca is not defined and ldap_client_ca_path is not defined"

- name: 'Configure stunnel'
  ansible.builtin.template:
    dest: '/etc/stunnel/stunnel.conf'
    src: stunnel.conf.j2
    owner: root
    group: root
    mode: '0644'
  notify: ldap_client_reload_stunnel

- name: 'Enable and start stunnel'
  ansible.builtin.service:
    name: "{{ ldap_client_stunnel_service_name }}"
    enabled: true
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'started') }}"
